# Continuous Deployment (CD) Workflow
# This workflow deploys the application after successful CI
# It only runs on the main branch and builds/pushes Docker images

name: Continuous Deployment (CD)

# Trigger this workflow only when:
# - CI workflow completes successfully
# - Push is to the main branch
on:
  workflow_run:
    workflows: ["Continuous Integration (CI)"]
    types:
      - completed
    branches: [main]

jobs:
  # Job to build and deploy Docker image
  build-and-deploy:
    name: Build & Deploy Docker Image
    runs-on: ubuntu-latest
    
    # Only run if the CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      # Step 1: Get the code from repository
      - name:  Checkout Repository Code
        uses: actions/checkout@v4

      # Step 2: Setup Docker Buildx for advanced building features
      - name:  Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Login to GitHub Container Registry
      - name:  Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Extract metadata for Docker tags and labels
      - name:  Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/python-llm-bias-detector
          tags: |
            # Tag with 'latest' for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with git commit SHA
            type=sha,prefix={{branch}}-
            # Tag with timestamp
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      # Step 5: Build and push Docker image
      - name:  Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use cache to speed up builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build for multiple platforms
          platforms: linux/amd64,linux/arm64

